<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets
    xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  
  <!-- IMMUTABLE OBJECT-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Immutable Object</Title>
      <Author>AMewald</Author>
      <Shortcut>oopImmutableObject</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>ClassName</ID>
          <Default>ClassName</Default>
        </Literal>
        <Literal Editable="true">
          <ID>type1</ID>
          <Default>int</Default>
        </Literal>
        <Literal Editable="true">
          <ID>param1</ID>
          <Default>param1</Default>
        </Literal>
        <Literal Editable="true">
          <ID>type2</ID>
          <Default>int</Default>
        </Literal>
        <Literal Editable="true">
          <ID>param2</ID>
          <Default>param2</Default>
        </Literal>
      </Declarations>

      <Code Language="CSharp" Delimiter="$">
        <![CDATA[
                
                ///
                /// Sealed class forces that Equals methods are only
                /// called with instances of $ClassName$ and not any
                /// derrived classes, which causes that equality is only
                /// done for properties of this class.
                ///
                public sealed class $ClassName$ : IEquatable<$ClassName$>
                {

                    public $type1$ $param1$ {get;}
                    public $type2$ $param2$ {get;}

                   /// <summary>
                   /// Ensure that class can only be created via Instance
                   /// </summary>
                   private $ClassName$($type1$ $param1$, $type2$ $param2$)
                   {
                       this.$param1$ = $param1$
                       this.$param2$ = $param2$
                   }

                   public override bool Equals(object other) => 
                        this.Equals(other as $ClassName$);

                    public bool Equals($ClassName$ other) =>
                        other != null &&
                        this.$param1$ == other.$param1$ && 
                        this.$param2$ == other.$param2$;

                    public override int GetHashCode() =>
                        this.$param1$.GetHashCode() ^ this.$param2$.GetHashCode();

                    public static bool operator == ($ClassName$ a, $ClassName$ b) =>
                        (object.ReferenceEquals(a, null) && object.ReferenceEquals(b, null)) ||
                        (!object.ReferenceEquals(a, null) && a.Equals(b));

                    public static bool operator != ($ClassName$ a, $ClassName$ b) => !(a == b);

                }
                ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- NULL OBJECT -->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Null Object</Title>
      <Author>AMewald</Author>
      <Shortcut>oopNullObject</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>InterfaceName</ID>
          <Default>InterfaceName</Default>
        </Literal>
        <Literal Editable="true">
          <ID>Methods</ID>
          <Default>void Method1();</Default>
        </Literal>
      </Declarations>

      <Code Language="CSharp" Delimiter="$">
        <![CDATA[

                public interface I$InterfaceName$
                {
                  // TODO: Add interface methods here
                  $Methods$
                }

                public class Void$InterfaceName$ : I$InterfaceName$
                {
                  ///
                  /// Lets make the singleton thread static, so each
                  /// thread has a seperate copy of the singleton.
                  /// This is ok because this object shall never
                  /// have any logic in it.
                  ///
                  [ThreadStatic]
                  private static Void$InterfaceName$ instance;

                  /// Avoid explicit object construction. Use
                  private Void$InterfaceName$(){}

                  public static Void$InterfaceName$ Instance
                  {
                    get
                    {
                      if (instance == null)
                      {
                        instance = new Void$InterfaceName$();
                      }
                      return instance;
                    }
                  }

                  // TODO: Add default implementation of interface
                  $Methods$

                }

                /// Class representing logic, data, etc.
                public class X_X_X_X$InterfaceName$ : I$InterfaceName$
                {

                }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <!-- Chained rules -->

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Rule Chain</Title>
      <Author>AMewald</Author>
      <Shortcut>oopConditionalRuleChainObject</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>InterfaceName</ID>
          <Default>InterfaceName</Default>
        </Literal>
        <Literal Editable="true">
          <ID>Methods</ID>
          <Default>void Method1();</Default>
        </Literal>
      </Declarations>

      <Code Language="CSharp" Delimiter="$">
        <![CDATA[

                public interface I$InterfaceName$
                {
                  // TODO: Add interface methods here
                  $Methods$
                  Action<Action> InvokeAction { get; }
                }

                public sealed class ConditionalRule : I$InterfaceName$
                {
                  public ConditionalRule(Func<bool> predicate, Action<Action> action, I$InterfaceName$ next)
                  {
                    this.Predicate = predicate ?? throw new ArgumentNullException(nameof(predicate));
                    this.Action = action ?? throw new ArgumentNullException(nameof(action));
                    this.Next = next ?? throw new ArgumentNullException(nameof(next));
                  }

                  private I$InterfaceName$ Next { get; set; }
                  private Func<bool> Predicate { get; set; }
                  private Action<Action> Action { get; set; }

                  public Action<Action> InvokeAction 
                  {
                      get 
                      {
                          if (this.Predicate()) 
                              return this.FireAction;
                          return this.Forward; 
                      } 
                  }

                  #region Implement interface method HERE
                  public $Methods$
                  {
                    throw new NotImplementedException();
                  }

                  #endregion

                  private void Forward(Action action) => this.Next.InvokeAction(action);

                  private void FireAction(Action action)
                  {
                      Action<Action> subsequentAction = this.Forward;

                      this.Action(() =>
                      {
                          action?.Invoke();
                          subsequentAction = a => { };
                      });

                      subsequentAction(action);
                  }
              }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>